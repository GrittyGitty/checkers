{"version":3,"file":"index.f3f9bf1c.js","sources":["../../vite/modulepreload-polyfill","../../src/types.ts","../../src/main.ts"],"sourcesContent":["__VITE_IS_MODERN__&&(function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n}());","type EventMap = HTMLElementEventMap;\ntype ValueOf<T> = T[keyof T];\ntype KeysForValue<T, V extends ValueOf<T>> = {\n  [K in keyof T]: T[K] extends V ? K : never;\n}[keyof T];\nexport type EventMapSubset<V extends ValueOf<EventMap>> = KeysForValue<EventMap, V>;\n\nexport enum Color {\n  \"black\" = \"black\",\n  \"red\" = \"red\"\n}\n\nexport type Cell = {\n  row: number;\n  column: number;\n}\n\nexport type FinalCell = {\n  finalRow: number;\n  finalColumn: number;\n}\n\nexport type StartCell = {\n  startRow: number;\n  startColumn: number;\n}\n\n\nexport type Grid = number[][];\n\nexport type EventCoords = {\n  clientX: number;\n  clientY: number;\n};","import type { EventMapSubset, Cell, EventCoords, FinalCell, Grid, StartCell } from \"./types\";\r\nimport { Color } from './types';\r\n\r\nconst pieces = [\"black\", \"black-king\", \"red\", \"red-king\", \"empty\"];\r\nconst movingDys = [[-1], [-1, 1], [1], [-1, 1]];\r\nconst eatingDys = movingDys.map((dirs) => dirs.map((d) => d * 2));\r\n\r\nconst colors = [Color.black, Color.red] as const;\r\n\r\nconst EMPTY_VALUE = pieces.length - 1;\r\n\r\nconst clsx = (bag: Record<string, unknown>, ...strings: string[]) => {\r\n    const filtered = Object.entries(bag).filter(([, v]) => Boolean(v)).map(([cls]) => cls);\r\n    return [...strings, ...filtered].join(\" \");\r\n}\r\n\r\n\r\nconst defaultSetup = {\r\n    turn: Color.black,\r\n    grid: `\r\n-r-r-r-r\r\nr-r-r-r-\r\n-r-r-r-r\r\n--------\r\n--------\r\nb-b-b-b-\r\n-b-b-b-b\r\nb-b-b-b-\r\n`.trim().split(\"\\n\").filter(Boolean).join(\"\\n\")\r\n};\r\n\r\n\r\nclass GridUpdate {\r\n    indices: Cell;\r\n    value: number;\r\n\r\n    constructor(row: number, column: number, value = EMPTY_VALUE) {\r\n        this.indices = { row, column };\r\n        this.value = value;\r\n    }\r\n\r\n    static updateFactory(final: FinalCell, finalVal: number, ...remove: GridUpdate[]) {\r\n        let updates = [];\r\n        updates.push(new GridUpdate(final.finalRow, final.finalColumn, finalVal));\r\n        remove.forEach(({ indices }) => updates.push(new GridUpdate(indices.row, indices.column)));\r\n        return updates;\r\n    }\r\n}\r\n\r\nfunction forEach(cb: (row: number, column: number) => void) {\r\n    for (let row = 0; row < 8; row++) {\r\n        for (let column = 0; column < 8; column++) {\r\n            cb(row, column);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst dom = (() => {\r\n    const $ = <E extends HTMLElement = HTMLElement>(id: string) => document.getElementById(id)! as E;\r\n\r\n    const table = $<HTMLTableElement>(\"table\");\r\n    const turnDiv = $(\"turnDiv\");\r\n    const trailDiv = $(\"trailingDiv\");\r\n    const mainDiv = $(\"containerBoard\");\r\n    const reset = $(\"reset\");\r\n    const share = $(\"share\");\r\n    const undo = $<HTMLButtonElement>(\"undo\");\r\n    const redo = $<HTMLButtonElement>(\"redo\");\r\n\r\n    const add = <K extends keyof HTMLElementEventMap>(e: K) => (el: HTMLElement, cb: (e: HTMLElementEventMap[K]) => void) => el.addEventListener(e, cb);\r\n    const click = add(\"click\"), mousedown = add(\"mousedown\"), mouseover = add(\"mouseover\"), touchstart = add(\"touchstart\");\r\n\r\n    const LEGAL_TARGET = \"legal-target\";\r\n    const CAN_MOVE = \"can-move\";\r\n    const pieceClasses = pieces.map((_, i) => `piece-${pieces[i]}`);\r\n    const EMPTY_PIECE = pieceClasses[EMPTY_VALUE];\r\n    const colorToClass = Object.fromEntries(colors.map((c) => [c, `piece-${c}`]));\r\n    const getDomCell = (row: number, column: number) => table.rows[row].cells[column];\r\n\r\n    const createCellInListChecker = (list: Cell[]) => {\r\n        const moveSet = new Set(list.map(({ row, column }) => `${row},${column}`));\r\n        return (row: number, column: number) => moveSet.has(`${row},${column}`);\r\n    }\r\n\r\n    let dragging = false;\r\n\r\n    const forEachCell = (cb: (cell: Cell & { domCell: HTMLTableCellElement }) => void) => forEach((row: number, column: number) => cb({ row, column, domCell: getDomCell(row, column) }))\r\n\r\n    const renderClasses = (grid: Grid, { legalTargets, piecesThatCanMove, turn }: { turn: Color; legalTargets: Cell[]; piecesThatCanMove: Cell[] }) => {\r\n        turnDiv.className = colorToClass[turn];\r\n        undo.disabled = idx === 0;\r\n        redo.disabled = idx === stack.length - 1;\r\n        const isLegalTargetForHoveredCell = createCellInListChecker(legalTargets);\r\n        const canMove = createCellInListChecker(piecesThatCanMove)\r\n        forEachCell(({ row, column, domCell }) => {\r\n            const cellVal = grid[row][column];\r\n            const newValue = clsx({\r\n                [LEGAL_TARGET]: isLegalTargetForHoveredCell(row, column),\r\n                [CAN_MOVE]: canMove(row, column) && !dragging\r\n            }, pieceClasses[cellVal]);\r\n            if (domCell.className !== newValue)\r\n                domCell.className = newValue;\r\n        })\r\n    }\r\n\r\n    mousedown(table, (e) => {\r\n        startDrag(e, { moveEvent: \"mousemove\", endEvent: \"mouseup\", coordsExtractor: e => e })\r\n    })\r\n    touchstart(table, (e) => {\r\n        startDrag(e, { moveEvent: \"touchmove\", endEvent: \"touchend\", coordsExtractor: e => e.changedTouches[0] });\r\n    })\r\n\r\n    function startDrag<EventKey extends EventMapSubset<TouchEvent | MouseEvent>>(e: HTMLElementEventMap[EventKey], { moveEvent, endEvent, coordsExtractor }: { moveEvent: EventKey, endEvent: EventKey, coordsExtractor: (ev: typeof e) => EventCoords }) {\r\n        const { clientX, clientY } = coordsExtractor(e);\r\n        let { row: startRow, column: startColumn } = getIndicesForMouseCoordinates({ clientX, clientY });\r\n\r\n        const classSet = new Set(Array.from(getDomCell(startRow, startColumn).classList));\r\n        const cellHas = classSet.has.bind(classSet);\r\n        if (!cellHas(CAN_MOVE) || cellHas(EMPTY_PIECE))\r\n            return;\r\n\r\n        dragging = true;\r\n\r\n        mainDiv.addEventListener(moveEvent, drag);\r\n        mainDiv.addEventListener(endEvent, endDrag, { once: true });\r\n\r\n        const color = pieceClasses.find(cellHas);\r\n        color && (trailDiv.className = color);\r\n        const { width, height } = trailDiv.getBoundingClientRect();\r\n        const legalTargets = state.getLegalTargets(startRow, startColumn);\r\n        //-------------Temporarily remove clicked on piece for The Purposes Of Drag------------------\r\n        state.updatedGrid([new GridUpdate(startRow, startColumn, EMPTY_VALUE)]).updateUI(legalTargets);\r\n\r\n        const translateTrailingDiv = (x: number, y: number) => trailDiv.style.transform = `translateX(${x}px) translateY(${y}px)` as const;\r\n\r\n        const { x, y } = pointRelativeToTable({ clientX, clientY });\r\n\r\n        const pieceRelativeX = x % width;\r\n        const pieceRelativeY = y % height;\r\n\r\n        const translateTrailingDivOffsetByRelativePoint = ({ clientX, clientY }: EventCoords) => translateTrailingDiv(clientX - pieceRelativeX, clientY - pieceRelativeY);\r\n        translateTrailingDivOffsetByRelativePoint({ clientX, clientY })\r\n\r\n        function drag(move: typeof e) {\r\n            const { clientX, clientY } = coordsExtractor(move);\r\n            translateTrailingDivOffsetByRelativePoint({ clientX, clientY });\r\n        }\r\n\r\n        function endDrag(end: typeof e) {\r\n            mainDiv.removeEventListener(moveEvent, drag);\r\n            trailDiv.style.backgroundImage = \"\";\r\n            translateTrailingDiv(-1000, -1000);\r\n            dragging = false;\r\n            let { row: finalRow, column: finalColumn } = getIndicesForMouseCoordinates(coordsExtractor(end));\r\n            BoardState.handleMove(finalRow, finalColumn, startRow, startColumn);\r\n        }\r\n    }\r\n\r\n    let { left, top, width, height } = table.getBoundingClientRect();\r\n\r\n\r\n    function pointRelativeToTable({ clientX, clientY }: EventCoords) {\r\n        const subtractFromX = left + window.pageXOffset;\r\n        const subtractFromY = top + window.pageYOffset;\r\n        const x = clientX - subtractFromX, y = clientY - subtractFromY;\r\n        return { x, y }\r\n    }\r\n\r\n    function getIndicesForMouseCoordinates({ clientX, clientY }: EventCoords) {\r\n        const { x, y } = pointRelativeToTable({ clientX, clientY })\r\n        if (x > width || y > height)\r\n            return { row: -1, column: -1 };\r\n        return {\r\n            row: Math.floor((y / height) * 8),\r\n            column: Math.floor((x / width) * 8)\r\n        };\r\n    }\r\n\r\n    function toast(text: string, ms = 2000) {\r\n        const atoast = document.createElement('div');\r\n        atoast.classList.add(\"toast\")\r\n        atoast.innerText = text;\r\n        document.body.appendChild(atoast);\r\n        setTimeout(() => {\r\n            document.body.removeChild(atoast);\r\n        }, ms);\r\n    }\r\n\r\n    window.onresize = () => ({ left, top, width, height } = table.getBoundingClientRect());\r\n    return {\r\n        updateUI({ grid, turn, legalTargets, piecesThatCanMove }: { grid: Grid; turn: Color; legalTargets: Cell[]; piecesThatCanMove: Cell[] }) {\r\n            renderClasses(grid, { legalTargets, piecesThatCanMove, turn });\r\n        },\r\n        registerShare: (cb: (e: MouseEvent) => void) => click(share, cb),\r\n        registerUndo: (undoCb: VoidFunction, redoCb: VoidFunction) => {\r\n            click(undo, undoCb);\r\n            click(redo, redoCb);\r\n            window.addEventListener(\"keydown\", ({ key }) => {\r\n                if (key === \"ArrowLeft\" && !undo.disabled) undoCb();\r\n                if (key === \"ArrowRight\" && !redo.disabled) redoCb();\r\n            })\r\n        },\r\n        registerReset: (cb: VoidFunction) => click(reset, cb),\r\n        registerHover(highlightHovered: (row: number, column: number) => void) {\r\n            forEachCell(({ domCell, row, column }) => {\r\n                mouseover(domCell, () => highlightHovered(row, column))\r\n            })\r\n        },\r\n        toast\r\n    };\r\n})();\r\n\r\nclass BoardState {\r\n    grid: Grid;\r\n    currentTurn: Color;\r\n    flaggedCell?: Cell;\r\n    piecesThatCanMove: Cell[];\r\n\r\n    constructor(grid: Grid, turnColor: Color, { flaggedCell }: { flaggedCell?: Cell } = {}) {\r\n        this.grid = grid;\r\n        this.currentTurn = turnColor;\r\n        this.flaggedCell = flaggedCell;\r\n        this.piecesThatCanMove = this.getPiecesThatCanMove();\r\n    }\r\n\r\n    updatedGrid(updates: GridUpdate[]) {\r\n        let newGrid = BoardState.computeGrid(this.grid, updates);\r\n        return new BoardState(newGrid, this.currentTurn);\r\n    }\r\n\r\n    updateFlaggedCell(flaggedCell?: Cell) {\r\n        return new BoardState(this.grid, this.currentTurn, { flaggedCell });\r\n    }\r\n\r\n    updateCurrentTurn() {\r\n        let grid = this.grid;\r\n        return new BoardState(grid, BoardState.oppositeColor(this.currentTurn));\r\n    }\r\n\r\n    getPiecesThatCanMove() {\r\n        return allCellsForColor(this.grid, this.currentTurn).filter(({ row, column }) => this.getLegalTargets(row, column).length);\r\n    }\r\n\r\n    updateUI(legalTargets: Cell[] = []) {\r\n        dom.updateUI({ grid: this.grid, turn: this.currentTurn, legalTargets, piecesThatCanMove: this.piecesThatCanMove });\r\n        return this;\r\n    }\r\n\r\n    getLegalTargets(startRow: number, startColumn: number) {\r\n        return allLogicalLegalMovesForCell(this, { startRow, startColumn }).map(({ finalCell }) => finalCell)\r\n    }\r\n\r\n    static oppositeColor(color?: Color) {\r\n        return color === colors[0] ? colors[1] : colors[0];\r\n    }\r\n\r\n    static computeGrid(grid: Grid, updates: GridUpdate[]) {\r\n        let gridCopy = deepGridCopy(grid);\r\n        updates.forEach(({ indices: { row, column }, value }) => {\r\n            gridCopy[row][column] = value;\r\n        });\r\n        return gridCopy;\r\n    }\r\n\r\n    static handleMove(finalRow: number, finalColumn: number, startRow: number, startColumn: number): void {\r\n        const finalCell = state.grid[finalRow][finalColumn];\r\n        if (finalCell !== EMPTY_VALUE || (finalRow === -1 && finalColumn === -1)) {\r\n            state.updateUI();\r\n            return;\r\n        }\r\n\r\n\r\n        let updates = generateGridUpdatesForMoveIfLegal(state, { finalRow, finalColumn, startRow, startColumn });\r\n        if (updates.length > 0) { //was legal move...\r\n            let updatedState = state.updatedGrid(updates);\r\n            let isTheMoveAnEatMove = (updates.length === 3 && pieces[updates[updates.length - 1].value].split(\"-\")[1] !== \"king\") || (updates.length === 4),\r\n                canTheMovingPieceStillEat = (allLegalEatingMovesForCell(updatedState.grid, finalRow, finalColumn).length !== 0);\r\n            state = (isTheMoveAnEatMove && canTheMovingPieceStillEat) ? // was eat, and there are more eating options for the same cell\r\n                updatedState.updateFlaggedCell({ row: finalRow, column: finalColumn }) :\r\n                updatedState.updateFlaggedCell().updateCurrentTurn();\r\n            if (didColorLose(state.grid, state.currentTurn)) {\r\n                dom.toast(`${state.currentTurn} lost! :(`, 5000)\r\n                resetGame();\r\n            }\r\n        }\r\n        state.updateUI();\r\n        const serialized = state.serialize();\r\n        store.state = serialized;\r\n        stack[++idx] = serialized;\r\n        stack.splice(idx + 1);\r\n    }\r\n\r\n    static startSession({ grid, turn }: { grid: string; turn: Color }) {\r\n        const regularBoardSetup = changeGridStringToNumbers(grid).trim().split(\"\\n\").map(r => r.trim());\r\n        const raw: Grid = Array.from({ length: 8 }, () => Array.from({ length: 8 }));\r\n        const matrix = raw.map((row, rIndex) => row.map((_, cIndex) => Number(regularBoardSetup[rIndex].charAt(cIndex))));\r\n        return new BoardState(matrix, turn).updateUI()\r\n    }\r\n\r\n    serialize() {\r\n        const classToAlias = [\"b\", \"B\", \"r\", \"R\", \"-\"];\r\n        return {\r\n            grid: this.grid.map((r) => {\r\n                return r.map((c) => classToAlias[c]).join(\"\")\r\n            }).join(\"\\n\"),\r\n            turn: this.currentTurn\r\n        }\r\n    }\r\n}\r\n\r\nfunction generateGridUpdatesForMoveIfLegal(state: BoardState, { finalRow, finalColumn, startRow, startColumn }: FinalCell & StartCell) {\r\n    const logicalMoves = allLogicalLegalMovesForCell(state, { startRow, startColumn });\r\n    const specificMove = logicalMoves.find((({ finalCell }) => finalCell.row === finalRow && finalCell.column === finalColumn))\r\n    if (!specificMove) return [];\r\n\r\n    const { updates } = specificMove;\r\n\r\n    if (((finalRow === 7) || (finalRow === 0)) && updates.length > 0)\r\n        updates.push(new GridUpdate(finalRow, finalColumn, pieces.indexOf(colorForCell(state.grid[startRow][startColumn]) + \"-\" + \"king\")));\r\n\r\n    return updates;\r\n}\r\n\r\nfunction allLogicalLegalMovesForCell({ grid, flaggedCell, currentTurn }: BoardState, { startRow, startColumn }: StartCell) {\r\n    const startCell = grid[startRow][startColumn];\r\n    if (\r\n        startCell === EMPTY_VALUE ||\r\n        colorForCell(startCell) !== currentTurn ||\r\n        (startRow === flaggedCell?.row && startColumn === flaggedCell?.column)\r\n    )\r\n        return [];\r\n    return isThereAnEatingPossibilityForGivenColor(grid, colorForCell(grid[startRow][startColumn]))\r\n        ? allLegalEatingMovesForCell(grid, startRow, startColumn)\r\n        : allLegalNonEatingMovesForCell(grid, startRow, startColumn)\r\n}\r\n\r\nfunction isThereAnEatingPossibilityForGivenColor(grid: Grid, color?: Color) {\r\n    return allCellsForColor(grid, color).some(({ row, column }) => allLegalEatingMovesForCell(grid, row, column).length > 0);\r\n}\r\n\r\n\r\nfunction colorForCell(gridVal: number) {\r\n    return gridVal !== EMPTY_VALUE ? pieces[gridVal].split(\"-\")[0] : \"empty\";\r\n}\r\n\r\ntype PotentialMoves = {\r\n    finalCell: Cell;\r\n    updates: GridUpdate[];\r\n}[];\r\n\r\nfunction allLegalEatingMovesForCell(grid: Grid, startRow: number, startColumn: number) {\r\n    const eatingDxs = [2, -2];\r\n    const possibleEatings: PotentialMoves = [];\r\n    const startCell = grid[startRow][startColumn];\r\n\r\n    if (startCell === EMPTY_VALUE)\r\n        return possibleEatings;\r\n\r\n    for (let dy of eatingDys[startCell]) {\r\n        for (let dx of eatingDxs) {\r\n            let finalRow = startRow + dy, finalColumn = startColumn + dx;\r\n            if (areRowsOutOfBounds(finalRow) || areColumnsOutOfBounds(finalColumn))\r\n                continue;\r\n            let finalCell = grid[finalRow][finalColumn];\r\n\r\n            let oneBeforeRow = startRow + ((Math.abs(dy) - 1) * Math.sign(dy)),\r\n                oneBeforeColumn = startColumn + ((Math.abs(dx) - 1) * Math.sign(dx));\r\n\r\n            let oneBefore = grid[oneBeforeRow][oneBeforeColumn];\r\n\r\n            if (finalCell === EMPTY_VALUE)\r\n                if (colorForCell(oneBefore) === BoardState.oppositeColor(colorForCell(startCell))) {\r\n                    possibleEatings.push({\r\n                        finalCell: { row: finalRow, column: finalColumn },\r\n                        updates: GridUpdate.updateFactory({\r\n                            finalRow,\r\n                            finalColumn\r\n                        }, startCell, new GridUpdate(oneBeforeRow, oneBeforeColumn), new GridUpdate(startRow, startColumn))\r\n                    });\r\n                }\r\n        }\r\n    }\r\n    return possibleEatings;\r\n}\r\n\r\nfunction allLegalNonEatingMovesForCell(grid: Grid, startRow: number, startColumn: number) {\r\n    const movingDxs = [1, -1];\r\n\r\n    let possibleMovings: PotentialMoves = [];\r\n    let startCell = grid[startRow][startColumn];\r\n    if (startCell === EMPTY_VALUE)\r\n        return possibleMovings;\r\n\r\n    for (let dy of movingDys[startCell]) {\r\n        for (let dx of movingDxs) {\r\n            let finalRow = startRow + dy, finalColumn = startColumn + dx;\r\n            if (areRowsOutOfBounds(finalRow) || areColumnsOutOfBounds(finalColumn))\r\n                continue;\r\n            let finalCell = grid[finalRow][finalColumn];\r\n            if (finalCell === EMPTY_VALUE)\r\n                possibleMovings.push({\r\n                    finalCell: { row: finalRow, column: finalColumn },\r\n                    updates: GridUpdate.updateFactory({\r\n                        finalRow,\r\n                        finalColumn\r\n                    }, startCell, new GridUpdate(startRow, startColumn))\r\n                });\r\n        }\r\n    }\r\n    return possibleMovings;\r\n}\r\n\r\nfunction allCellsForColor(grid: Grid, color?: Color) {\r\n    const cells: Cell[] = [];\r\n    forEach((row: number, column: number) => {\r\n        if (colorForCell(grid[row][column]) === color)\r\n            cells.push({ row, column })\r\n    })\r\n    return cells;\r\n}\r\n\r\nfunction didColorLose(grid: Grid, color: Color) {\r\n    return !allCellsForColor(grid, color).some(({ row, column }) => allLegalEatingMovesForCell(grid, row, column).length > 0 || allLegalNonEatingMovesForCell(grid, row, column).length > 0);\r\n}\r\n\r\nconst deepGridCopy = (arr: Grid): Grid => arr.map((r) => r.map((c) => c)) as Grid;\r\n\r\n\r\nfunction areRowsOutOfBounds(...indices: number[]) {\r\n    return indices.some(row => row >= 8 || row < 0);\r\n}\r\n\r\nfunction areColumnsOutOfBounds(...indices: number[]) {\r\n    return indices.some(column => column >= 8 || column < 0);\r\n}\r\n\r\nfunction changeGridStringToNumbers(gridstring: string) {\r\n    return [\"b\", \"B\", \"r\", \"R\", \"-\"].reduce((grid, alias, i) => grid.replaceAll(alias, String(i)), gridstring)\r\n}\r\n\r\nconst storageBackend = (() => {\r\n    const STATE = \"state\";\r\n    const GRID = \"grid\";\r\n    const TURN = \"turn\";\r\n    const { pathname, href } = window.location;\r\n\r\n\r\n    const fromLocalStorage = () => {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(STATE)!);\r\n        } catch (ex) {\r\n            return;\r\n        }\r\n    };\r\n    const fromParams = () => {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const grid = urlParams.get(GRID);\r\n        const turn = urlParams.get(TURN);\r\n        return grid ? { grid, turn } : undefined;\r\n    }\r\n\r\n    const fetch = () => (window.location.search ? fromParams() : fromLocalStorage()) || defaultSetup;\r\n\r\n    const persist = ({ grid, turn } = defaultSetup) => {\r\n        const params = new URLSearchParams();\r\n        params.set(GRID, grid);\r\n        params.set(TURN, turn);\r\n        history.pushState(null, '', `${pathname}?${params.toString()}`);\r\n        localStorage.setItem(STATE, JSON.stringify({ grid, turn }))\r\n    };\r\n    const reset = () => {\r\n        history.pushState(null, '', pathname);\r\n        localStorage.removeItem(STATE);\r\n    };\r\n\r\n    function compileSharingUrl() {\r\n        const params = new URLSearchParams();\r\n        const { grid, turn } = fetch();\r\n        params.set(GRID, grid);\r\n        params.set(TURN, turn);\r\n        return `${href.split('?')[0]}?${params.toString()}`;\r\n    }\r\n\r\n    return { fetch, persist, reset, compileSharingUrl };\r\n})();\r\n\r\nconst store = (() => {\r\n    const { fetch, persist, reset, compileSharingUrl } = storageBackend;\r\n    return {\r\n        get state() {\r\n            return fetch()\r\n        },\r\n        set state({ grid, turn }) {\r\n            persist({ grid, turn })\r\n        },\r\n        reset,\r\n        get share() {\r\n            return compileSharingUrl();\r\n        }\r\n    }\r\n})()\r\n\r\n\r\n\r\nfunction resetGame() {\r\n    state = BoardState.startSession(defaultSetup);\r\n    stack = [defaultSetup];\r\n    idx = 0;\r\n    store.reset();\r\n}\r\n// MAIN:\r\ndom.registerShare(() => {\r\n    navigator.clipboard.writeText(store.share).then(() => {\r\n        dom.toast(\"URL with game-state copied to clipboard! 🎆🎆🎆\")\r\n    })\r\n})\r\ndom.registerReset(resetGame);\r\ndom.registerHover((row: number, column: number) => state.updateUI(state.getLegalTargets(row, column)))\r\n\r\ndom.registerUndo(\r\n    () => {\r\n        state = BoardState.startSession(stack[--idx]);\r\n        store.state = state.serialize();\r\n    },\r\n    () => {\r\n        state = BoardState.startSession(stack[++idx]);\r\n        store.state = state.serialize();\r\n    }\r\n);\r\nlet stack = [store.state];\r\nlet idx = 0;\r\nlet state = BoardState.startSession(store.state);\r\n"],"names":["relList","link","processPreload","mutations","mutation","node","getFetchOpts","script","fetchOpts","Color","pieces","movingDys","eatingDys","dirs","d","colors","EMPTY_VALUE","clsx","bag","strings","filtered","v","cls","defaultSetup","GridUpdate","row","column","value","__publicField","final","finalVal","remove","updates","indices","forEach","cb","dom","$","id","table","turnDiv","trailDiv","mainDiv","reset","share","undo","redo","add","e","el","click","mousedown","mouseover","touchstart","LEGAL_TARGET","CAN_MOVE","pieceClasses","_","i","EMPTY_PIECE","colorToClass","c","getDomCell","createCellInListChecker","list","moveSet","dragging","forEachCell","renderClasses","grid","legalTargets","piecesThatCanMove","turn","idx","stack","isLegalTargetForHoveredCell","canMove","domCell","cellVal","newValue","startDrag","moveEvent","endEvent","coordsExtractor","clientX","clientY","startRow","startColumn","getIndicesForMouseCoordinates","classSet","cellHas","drag","endDrag","color","width","height","state","translateTrailingDiv","x","y","pointRelativeToTable","pieceRelativeX","pieceRelativeY","translateTrailingDivOffsetByRelativePoint","move","end","finalRow","finalColumn","BoardState","left","top","subtractFromX","subtractFromY","toast","text","ms","atoast","undoCb","redoCb","key","highlightHovered","turnColor","flaggedCell","newGrid","allCellsForColor","allLogicalLegalMovesForCell","finalCell","gridCopy","deepGridCopy","generateGridUpdatesForMoveIfLegal","updatedState","isTheMoveAnEatMove","canTheMovingPieceStillEat","allLegalEatingMovesForCell","didColorLose","resetGame","serialized","store","regularBoardSetup","changeGridStringToNumbers","r","matrix","rIndex","cIndex","classToAlias","specificMove","colorForCell","currentTurn","startCell","isThereAnEatingPossibilityForGivenColor","allLegalNonEatingMovesForCell","gridVal","eatingDxs","possibleEatings","dy","dx","areRowsOutOfBounds","areColumnsOutOfBounds","oneBeforeRow","oneBeforeColumn","oneBefore","movingDxs","possibleMovings","cells","arr","gridstring","alias","storageBackend","STATE","GRID","TURN","pathname","href","fromLocalStorage","fromParams","urlParams","fetch","persist","params","compileSharingUrl"],"mappings":"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"}