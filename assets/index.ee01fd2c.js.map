{"version":3,"file":"index.ee01fd2c.js","sources":["../../vite/modulepreload-polyfill","../../src/main.js"],"sourcesContent":["__VITE_IS_MODERN__&&(function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n}());","const pieces = [\"black\", \"black-king\", \"red\", \"red-king\", \"empty\"];\r\nconst movingDys = [[-1], [-1, 1], [1], [-1, 1]];\r\nconst eatingDys = movingDys.map((dirs) => dirs.map((d) => d * 2));\r\nconst colors = [\"black\", \"red\"];\r\nconst EMPTY_VALUE = pieces.length - 1;\r\n\r\nconst clsx = (...classes) => {\r\n    const bag = Object.entries(classes.pop()).filter(([, v]) => Boolean(v)).map(([cls]) => cls);\r\n    return [...classes, ...bag].join(\" \");\r\n}\r\n\r\n\r\nconst defaultSetup = {\r\n    turn: \"black\",\r\n    grid: `\r\n-r-r-r-r\r\nr-r-r-r-\r\n-r-r-r-r\r\n--------\r\n--------\r\nb-b-b-b-\r\n-b-b-b-b\r\nb-b-b-b-\r\n`.trim().split(\"\\n\").filter(Boolean).join(\"\\n\")\r\n};\r\n\r\n\r\n\r\n\r\nclass GridUpdate {\r\n    constructor(row, column, value = EMPTY_VALUE) {\r\n        this.indices = { row, column };\r\n        this.value = value;\r\n    }\r\n\r\n    static updateFactory(final, finalVal, ...remove) {\r\n        let updates = [];\r\n        updates.push(new GridUpdate(final.finalRow, final.finalColumn, finalVal));\r\n        remove.forEach(({ indices }) => updates.push(new GridUpdate(indices.row, indices.column)));\r\n        return updates;\r\n    }\r\n}\r\n\r\nfunction forEach(cb) {\r\n    for (let row = 0; row < 8; row++) {\r\n        for (let column = 0; column < 8; column++) {\r\n            cb(row, column);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst dom = (() => {\r\n    const $ = (id) => document.getElementById(id);\r\n\r\n    const table = $(\"table\");\r\n    const turnDiv = $(\"turnDiv\");\r\n    const trailDiv = $(\"trailingDiv\");\r\n    const mainDiv = $(\"containerBoard\");\r\n    const reset = $(\"reset\");\r\n    const share = $(\"share\");\r\n    const undo = $(\"undo\");\r\n    const redo = $(\"redo\");\r\n\r\n    const [click, mousedown, mouseover, keydown, touchstart] =\r\n        [\"click\", \"mousedown\", \"mouseover\", \"keydown\", \"touchstart\"].map(\r\n            e => (el, cb) => el.addEventListener(e, cb)\r\n        );\r\n\r\n    const LEGAL_TARGET = \"legal-target\";\r\n    const CAN_MOVE = \"can-move\";\r\n    const pieceClasses = pieces.map((_, i) => `piece-${pieces[i]}`);\r\n    const EMPTY_PIECE = pieceClasses[EMPTY_VALUE];\r\n    const colorToClass = Object.fromEntries(colors.map((c) => [c, `piece-${c}`]));\r\n    const getDomCell = (row, column) => table.rows[row].cells[column];\r\n\r\n    const createCellInListChecker = (list) => {\r\n        const moveSet = new Set(list.map(({ row, column }) => `${row},${column}`));\r\n        return (row, column) => moveSet.has(`${row},${column}`);\r\n    }\r\n\r\n    let dragging = false;\r\n\r\n    const forEachCell = (cb) => forEach((row, column) => cb({ row, column, domCell: getDomCell(row, column) }))\r\n\r\n    const renderClasses = (grid, { legalTargets, piecesThatCanMove, turn }) => {\r\n        turnDiv.className = colorToClass[turn];\r\n        undo.disabled = idx === 0;\r\n        redo.disabled = idx === stack.length - 1;\r\n        const isLegalTargetForHoveredCell = createCellInListChecker(legalTargets);\r\n        const canMove = createCellInListChecker(piecesThatCanMove)\r\n        forEachCell(({ row, column, domCell }) => {\r\n            const cellVal = grid[row][column];\r\n            const newValue = clsx(pieceClasses[cellVal], {\r\n                [LEGAL_TARGET]: isLegalTargetForHoveredCell(row, column),\r\n                [CAN_MOVE]: canMove(row, column) && !dragging\r\n            });\r\n            if (domCell.className !== newValue)\r\n                domCell.className = newValue;\r\n        })\r\n    }\r\n\r\n    mousedown(table, (e) => {\r\n        startDrag(e, { moveEvent: \"mousemove\", endEvent: \"mouseup\", coordsExtractor: e => e })\r\n    })\r\n    touchstart(table, (e) => {\r\n        startDrag(e, { moveEvent: \"touchmove\", endEvent: \"touchend\", coordsExtractor: e => e.changedTouches[0] });\r\n    })\r\n\r\n    function startDrag(e, { moveEvent, endEvent, coordsExtractor }) {\r\n        const { clientX, clientY } = coordsExtractor(e);\r\n        let { row: startRow, column: startColumn } = getIndicesForMouseCoordinates({ clientX, clientY });\r\n\r\n        const classSet = new Set(getDomCell(startRow, startColumn).classList);\r\n        const cellHas = classSet.has.bind(classSet);\r\n        if (!cellHas(CAN_MOVE) || cellHas(EMPTY_PIECE))\r\n            return;\r\n\r\n        dragging = true;\r\n\r\n        mainDiv.addEventListener(moveEvent, drag);\r\n        mainDiv.addEventListener(endEvent, endDrag, { once: true });\r\n\r\n\r\n        trailDiv.className = pieceClasses.find(cellHas);\r\n        const { width, height } = trailDiv.getBoundingClientRect();\r\n        const legalTargets = state.getLegalTargets(startRow, startColumn);\r\n        //-------------Temporarily remove clicked on piece for The Purposes Of Drag------------------\r\n        state.updatedGrid([new GridUpdate(startRow, startColumn, EMPTY_VALUE)]).updateUI(legalTargets);\r\n\r\n        const translateTrailingDiv = (x, y) => trailDiv.style.transform = `translateX(${x}px) translateY(${y}px)`;\r\n\r\n        const { x, y } = pointRelativeToTable({ clientX, clientY });\r\n\r\n        const pieceRelativeX = x % width;\r\n        const pieceRelativeY = y % height;\r\n\r\n        const translateTrailingDivOffsetByRelativePoint = ({ clientX, clientY }) => translateTrailingDiv(clientX - pieceRelativeX, clientY - pieceRelativeY);\r\n        translateTrailingDivOffsetByRelativePoint({ clientX, clientY })\r\n        function drag(move) {\r\n            const { clientX, clientY } = coordsExtractor(move);\r\n            translateTrailingDivOffsetByRelativePoint({ clientX, clientY });\r\n        }\r\n\r\n        function endDrag(end) {\r\n            mainDiv.removeEventListener(moveEvent, drag);\r\n            trailDiv.style.backgroundImage = \"\";\r\n            translateTrailingDiv(-1000, -1000);\r\n            dragging = false;\r\n            let { row: finalRow, column: finalColumn } = getIndicesForMouseCoordinates(coordsExtractor(end));\r\n            BoardState.handleMove(finalRow, finalColumn, startRow, startColumn);\r\n        }\r\n    }\r\n\r\n    let { left, top, width, height } = table.getBoundingClientRect();\r\n\r\n    function pointRelativeToTable({ clientX, clientY }) {\r\n        const subtractFromX = left + window.pageXOffset;\r\n        const subtractFromY = top + window.pageYOffset;\r\n        const x = clientX - subtractFromX, y = clientY - subtractFromY;\r\n        return { x, y }\r\n    }\r\n\r\n    function getIndicesForMouseCoordinates({ clientX, clientY }) {\r\n        const { x, y } = pointRelativeToTable({ clientX, clientY })\r\n        if (x > width || y > height)\r\n            return { row: -1, column: -1 };\r\n        return {\r\n            row: Math.floor((y / height) * 8),\r\n            column: Math.floor((x / width) * 8)\r\n        };\r\n    }\r\n\r\n    function toast(text, ms = 2000) {\r\n        const atoast = document.createElement('div');\r\n        atoast.classList.add(\"toast\")\r\n        atoast.innerText = text;\r\n        document.body.appendChild(atoast);\r\n        setTimeout(() => {\r\n            document.body.removeChild(atoast);\r\n        }, ms);\r\n    }\r\n\r\n    window.onresize = () => ({ left, top, width, height } = table.getBoundingClientRect());\r\n    return {\r\n        updateUI({ grid, turn, legalTargets, piecesThatCanMove }) {\r\n            renderClasses(grid, { legalTargets, piecesThatCanMove, turn });\r\n        },\r\n        registerShare: cb => click(share, cb),\r\n        registerUndo: (undoCb, redoCb) => {\r\n            click(undo, undoCb);\r\n            click(redo, redoCb);\r\n            keydown(window, ({ key }) => {\r\n                if (key === \"ArrowLeft\" && !undo.disabled) undoCb();\r\n                if (key === \"ArrowRight\" && !redo.disabled) redoCb();\r\n            });\r\n        },\r\n        registerReset: cb => click(reset, cb),\r\n        registerHover(highlightHovered) {\r\n            forEachCell(({ domCell, row, column }) => {\r\n                mouseover(domCell, () => highlightHovered(row, column))\r\n            })\r\n        },\r\n        toast\r\n    };\r\n})();\r\n\r\nclass BoardState {\r\n    constructor(grid, turnColor, { flaggedCell } = {}) {\r\n        this.grid = grid;\r\n        this.currentTurn = turnColor;\r\n        this.flaggedCell = flaggedCell;\r\n        this.piecesThatCanMove = this.getPiecesThatCanMove();\r\n    }\r\n\r\n    updatedGrid(updates) {\r\n        let newGrid = BoardState.computeGrid(this.grid, updates);\r\n        return new BoardState(newGrid, this.currentTurn);\r\n    }\r\n\r\n    updateFlaggedCell(flagged = undefined) {\r\n        return new BoardState(this.grid, this.currentTurn, { flagged });\r\n    }\r\n\r\n    updateCurrentTurn() {\r\n        let grid = this.grid;\r\n        return new BoardState(grid, BoardState.oppositeColor(this.currentTurn));\r\n    }\r\n\r\n    getPiecesThatCanMove() {\r\n        return allCellsForColor(this.grid, this.currentTurn).filter(({ row, column }) => this.getLegalTargets(row, column).length);\r\n    }\r\n\r\n    updateUI(legalTargets = []) {\r\n        dom.updateUI({ grid: this.grid, turn: this.currentTurn, legalTargets, piecesThatCanMove: this.piecesThatCanMove });\r\n        return this;\r\n    }\r\n\r\n    getLegalTargets(startRow, startColumn) {\r\n        return allLogicalLegalMovesForCell(this, { startRow, startColumn }).map(({ finalCell }) => finalCell)\r\n    }\r\n\r\n    static oppositeColor(color) {\r\n        return color === colors[0] ? colors[1] : colors[0];\r\n    }\r\n\r\n    static computeGrid(grid, update) {\r\n        let gridCopy = deepCopy2DArr(grid);\r\n        update.forEach(({ indices: { row, column }, value }) => {\r\n            gridCopy[row][column] = value;\r\n        });\r\n        return gridCopy;\r\n    }\r\n\r\n    static handleMove(finalRow, finalColumn, startRow, startColumn) {\r\n        const finalCell = state.grid[finalRow][finalColumn];\r\n        if (finalCell !== EMPTY_VALUE || (finalRow === -1 && finalColumn === -1))\r\n            return state.updateUI();\r\n\r\n        let updates = generateGridUpdatesForMoveIfLegal(state, { finalRow, finalColumn, startRow, startColumn });\r\n        if (updates.length > 0) { //was legal move...\r\n            let updatedState = state.updatedGrid(updates);\r\n            let isTheMoveAnEatMove = (updates.length === 3 && pieces[updates[updates.length - 1].value].split(\"-\")[1] !== \"king\") || (updates.length === 4),\r\n                canTheMovingPieceStillEat = (allLegalEatingMovesForCell(updatedState.grid, finalRow, finalColumn).length !== 0);\r\n            state = (isTheMoveAnEatMove && canTheMovingPieceStillEat) ? // was eat, and there are more eating options for the same cell\r\n                updatedState.updateFlaggedCell({ row: finalRow, column: finalColumn }) :\r\n                updatedState.updateFlaggedCell().updateCurrentTurn();\r\n            if (didColorLose(state.grid, state.currentTurn)) {\r\n                dom.toast(`${state.currentTurn} lost! :(`, 5000)\r\n                resetGame();\r\n            }\r\n        }\r\n        state.updateUI();\r\n        const serialized = state.serialize();\r\n        store.state = serialized;\r\n        stack[++idx] = serialized;\r\n        stack.splice(idx + 1);\r\n    }\r\n\r\n    static startSession({ grid, turn }) {\r\n        const regularBoardSetup = changeGridStringToNumbers(grid).trim().split(\"\\n\").map(r => r.trim());\r\n        const matrix = new Array(regularBoardSetup.length).fill(new Array(regularBoardSetup[0].length).fill(0)).map((row, rIndex) => row.map((cell, cIndex) => Number(regularBoardSetup[rIndex].charAt(cIndex))));\r\n        return new BoardState(matrix, turn).updateUI()\r\n    }\r\n\r\n    serialize() {\r\n        const classToAlias = [\"b\", \"B\", \"r\", \"R\", \"-\"];\r\n        return {\r\n            grid: this.grid.map((r) => {\r\n                return r.map((c) => classToAlias[c]).join(\"\")\r\n            }).join(\"\\n\"),\r\n            turn: this.currentTurn\r\n        }\r\n    }\r\n}\r\n\r\nfunction generateGridUpdatesForMoveIfLegal(state, { finalRow, finalColumn, startRow, startColumn }) {\r\n    const logicalMoves = allLogicalLegalMovesForCell(state, { startRow, startColumn });\r\n    const specificMove = logicalMoves.find((({ finalCell }) => finalCell.row === finalRow && finalCell.column === finalColumn))\r\n    if (!specificMove) return [];\r\n\r\n    const { updates } = specificMove;\r\n\r\n    if (((finalRow === 7) || (finalRow === 0)) && updates.length > 0)\r\n        updates.push(new GridUpdate(finalRow, finalColumn, pieces.indexOf(colorForCell(state.grid[startRow][startColumn]) + \"-\" + \"king\")));\r\n\r\n    return updates;\r\n}\r\n\r\nfunction allLogicalLegalMovesForCell({ grid, flaggedCell, currentTurn }, { startRow, startColumn }) {\r\n    const startCell = grid[startRow][startColumn];\r\n    if (\r\n        startCell === EMPTY_VALUE ||\r\n        colorForCell(startCell) !== currentTurn ||\r\n        (startRow === flaggedCell?.row && startColumn === flaggedCell?.column)\r\n    )\r\n        return [];\r\n    return isThereAnEatingPossibilityForGivenColor(grid, colorForCell(grid[startRow][startColumn]))\r\n        ? allLegalEatingMovesForCell(grid, startRow, startColumn)\r\n        : allLegalNonEatingMovesForCell(grid, startRow, startColumn)\r\n}\r\n\r\nfunction isThereAnEatingPossibilityForGivenColor(grid, color) {\r\n    return allCellsForColor(grid, color).some(({ row, column }) => allLegalEatingMovesForCell(grid, row, column).length > 0);\r\n}\r\n\r\n\r\nfunction colorForCell(gridVal) {\r\n    return gridVal !== EMPTY_VALUE ? pieces[gridVal].split(\"-\")[0] : \"empty\";\r\n}\r\n\r\n\r\nfunction allLegalEatingMovesForCell(grid, startRow, startColumn) {\r\n    const eatingDxs = [2, -2];\r\n    let possibleEatings = [];\r\n    let startCell = grid[startRow][startColumn];\r\n\r\n    if (startCell === EMPTY_VALUE)\r\n        return possibleEatings;\r\n\r\n    for (let dy of eatingDys[startCell]) {\r\n        for (let dx of eatingDxs) {\r\n            let finalRow = startRow + dy, finalColumn = startColumn + dx;\r\n            if (areRowsOutOfBounds(finalRow) || areColumnsOutOfBounds(finalColumn))\r\n                continue;\r\n            let finalCell = grid[finalRow][finalColumn];\r\n\r\n            let oneBeforeRow = startRow + ((Math.abs(dy) - 1) * Math.sign(dy)),\r\n                oneBeforeColumn = startColumn + ((Math.abs(dx) - 1) * Math.sign(dx));\r\n\r\n            let oneBefore = grid[oneBeforeRow][oneBeforeColumn];\r\n\r\n            if (finalCell === EMPTY_VALUE)\r\n                if (colorForCell(oneBefore) === BoardState.oppositeColor(colorForCell(startCell))) {\r\n                    possibleEatings.push({\r\n                        finalCell: { row: finalRow, column: finalColumn },\r\n                        updates: GridUpdate.updateFactory({\r\n                            finalRow,\r\n                            finalColumn\r\n                        }, startCell, new GridUpdate(oneBeforeRow, oneBeforeColumn), new GridUpdate(startRow, startColumn))\r\n                    });\r\n                }\r\n        }\r\n    }\r\n    return possibleEatings;\r\n}\r\n\r\nfunction allLegalNonEatingMovesForCell(grid, startRow, startColumn) {\r\n    const movingDxs = [1, -1];\r\n\r\n    let possibleMovings = [];\r\n    let startCell = grid[startRow][startColumn];\r\n    if (startCell === EMPTY_VALUE)\r\n        return possibleMovings;\r\n\r\n    for (let dy of movingDys[startCell]) {\r\n        for (let dx of movingDxs) {\r\n            let finalRow = startRow + dy, finalColumn = startColumn + dx;\r\n            if (areRowsOutOfBounds(finalRow) || areColumnsOutOfBounds(finalColumn))\r\n                continue;\r\n            let finalCell = grid[finalRow][finalColumn];\r\n            if (finalCell === EMPTY_VALUE)\r\n                possibleMovings.push({\r\n                    finalCell: { row: finalRow, column: finalColumn },\r\n                    updates: GridUpdate.updateFactory({\r\n                        finalRow,\r\n                        finalColumn\r\n                    }, startCell, new GridUpdate(startRow, startColumn))\r\n                });\r\n        }\r\n    }\r\n    return possibleMovings;\r\n}\r\n\r\nfunction allCellsForColor(grid, color) {\r\n    const cells = [];\r\n    forEach((row, column) => {\r\n        if (colorForCell(grid[row][column]) === color)\r\n            cells.push({ row, column })\r\n    })\r\n    return cells;\r\n}\r\n\r\nfunction didColorLose(grid, color) {\r\n    return !allCellsForColor(grid, color).some(({ row, column }) => allLegalEatingMovesForCell(grid, row, column).length > 0 || allLegalNonEatingMovesForCell(grid, row, column).length > 0);\r\n}\r\n\r\nconst deepCopy2DArr = (arr) => arr.map((r) => r.map((c) => c));\r\n\r\n\r\nfunction areRowsOutOfBounds(...indices) {\r\n    return indices.some(row => row >= 8 || row < 0);\r\n}\r\n\r\nfunction areColumnsOutOfBounds(...indices) {\r\n    return indices.some(column => column >= 8 || column < 0);\r\n}\r\n\r\nfunction changeGridStringToNumbers(gridstring) {\r\n    return [\"b\", \"B\", \"r\", \"R\", \"-\"].reduce((grid, alias, i) => grid.replaceAll(alias, i), gridstring)\r\n}\r\n\r\nconst storageBackend = (() => {\r\n    const STATE = \"state\";\r\n    const GRID = \"grid\";\r\n    const TURN = \"turn\";\r\n    const { pathname, href } = window.location;\r\n\r\n\r\n    const fromLocalStorage = () => {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(STATE));\r\n        } catch (ex) {\r\n            return;\r\n        }\r\n    };\r\n    const fromParams = () => {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const grid = urlParams.get(GRID);\r\n        const turn = urlParams.get(TURN);\r\n        return grid ? { grid, turn } : undefined;\r\n    }\r\n\r\n    const fetch = () => (window.location.search ? fromParams() : fromLocalStorage()) || defaultSetup;\r\n\r\n    const persist = ({ grid, turn } = defaultSetup) => {\r\n        const params = new URLSearchParams();\r\n        params.set(GRID, grid);\r\n        params.set(TURN, turn);\r\n        history.pushState(null, '', `${pathname}?${params.toString()}`);\r\n        localStorage.setItem(STATE, JSON.stringify({ grid, turn }))\r\n    };\r\n    const reset = () => {\r\n        history.pushState(null, '', pathname);\r\n        localStorage.removeItem(STATE);\r\n    };\r\n\r\n    function compileSharingUrl() {\r\n        const params = new URLSearchParams();\r\n        const { grid, turn } = fetch();\r\n        params.set(GRID, grid);\r\n        params.set(TURN, turn);\r\n        return `${href.split('?')[0]}?${params.toString()}`;\r\n    }\r\n\r\n    return { fetch, persist, reset, compileSharingUrl };\r\n})();\r\n\r\nconst store = (() => {\r\n    const { fetch, persist, reset, compileSharingUrl } = storageBackend;\r\n    return {\r\n        get state() {\r\n            return fetch()\r\n        },\r\n        set state({ grid, turn }) {\r\n            persist({ grid, turn })\r\n        },\r\n        reset,\r\n        get share() {\r\n            return compileSharingUrl();\r\n        }\r\n    }\r\n})()\r\n\r\n\r\n\r\nfunction resetGame() {\r\n    state = BoardState.startSession(defaultSetup);\r\n    stack = [defaultSetup];\r\n    idx = 0;\r\n    store.reset();\r\n}\r\n// MAIN:\r\ndom.registerShare(() => {\r\n    navigator.clipboard.writeText(store.share).then(() => {\r\n        dom.toast(\"URL with game-state copied to clipboard! 🎆🎆🎆\")\r\n    })\r\n})\r\ndom.registerReset(resetGame);\r\ndom.registerHover((row, column) => state.updateUI(state.getLegalTargets(row, column)))\r\n\r\ndom.registerUndo(\r\n    () => {\r\n        state = BoardState.startSession(stack[--idx]);\r\n        store.state = state.serialize();\r\n    },\r\n    () => {\r\n        state = BoardState.startSession(stack[++idx]);\r\n        store.state = state.serialize();\r\n    }\r\n);\r\nlet stack = [store.state];\r\nlet idx = 0;\r\nlet state = BoardState.startSession(store.state);\r\n"],"names":["relList","link","processPreload","mutations","mutation","node","getFetchOpts","script","fetchOpts","pieces","movingDys","eatingDys","dirs","d","colors","EMPTY_VALUE","clsx","classes","bag","v","cls","defaultSetup","GridUpdate","row","column","value","final","finalVal","remove","updates","indices","forEach","cb","dom","$","id","table","turnDiv","trailDiv","mainDiv","reset","share","undo","redo","click","mousedown","mouseover","keydown","touchstart","e","el","LEGAL_TARGET","CAN_MOVE","pieceClasses","_","i","EMPTY_PIECE","colorToClass","c","getDomCell","createCellInListChecker","list","moveSet","dragging","forEachCell","renderClasses","grid","legalTargets","piecesThatCanMove","turn","idx","stack","isLegalTargetForHoveredCell","canMove","domCell","cellVal","newValue","startDrag","moveEvent","endEvent","coordsExtractor","clientX","clientY","startRow","startColumn","getIndicesForMouseCoordinates","classSet","cellHas","drag","endDrag","width","height","state","translateTrailingDiv","x","y","pointRelativeToTable","pieceRelativeX","pieceRelativeY","translateTrailingDivOffsetByRelativePoint","move","end","finalRow","finalColumn","BoardState","left","top","subtractFromX","subtractFromY","toast","text","ms","atoast","undoCb","redoCb","key","highlightHovered","turnColor","flaggedCell","newGrid","flagged","allCellsForColor","allLogicalLegalMovesForCell","finalCell","color","update","gridCopy","deepCopy2DArr","generateGridUpdatesForMoveIfLegal","updatedState","isTheMoveAnEatMove","canTheMovingPieceStillEat","allLegalEatingMovesForCell","didColorLose","resetGame","serialized","store","regularBoardSetup","changeGridStringToNumbers","r","matrix","rIndex","cell","cIndex","classToAlias","specificMove","colorForCell","currentTurn","startCell","isThereAnEatingPossibilityForGivenColor","allLegalNonEatingMovesForCell","gridVal","eatingDxs","possibleEatings","dy","dx","areRowsOutOfBounds","areColumnsOutOfBounds","oneBeforeRow","oneBeforeColumn","oneBefore","movingDxs","possibleMovings","cells","arr","gridstring","alias","storageBackend","STATE","GRID","TURN","pathname","href","fromLocalStorage","fromParams","urlParams","fetch","persist","params","compileSharingUrl"],"mappings":"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"}