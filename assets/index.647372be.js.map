{"version":3,"file":"index.647372be.js","sources":["../../vite/modulepreload-polyfill","../../src/types.ts","../../src/consts.ts","../../src/classes/GridUpdate.ts","../../src/utils.ts","../../src/classes/BoardState.ts","../../src/store/storageBackend.ts","../../src/store/store.ts","../../src/stack.ts","../../src/dom/dom.ts","../../src/dom/toast.ts","../../src/main.ts"],"sourcesContent":["__VITE_IS_MODERN__&&(function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n}());","type EventMap = HTMLElementEventMap;\ntype ValueOf<T> = T[keyof T];\ntype KeysForValue<T, V extends ValueOf<T>> = {\n  [K in keyof T]: T[K] extends V ? K : never;\n}[keyof T];\nexport type EventMapSubset<V extends ValueOf<EventMap>> = KeysForValue<EventMap, V>;\n\nexport enum Color {\n  \"black\" = \"black\",\n  \"red\" = \"red\"\n}\n\nexport type Cell = {\n  row: number;\n  column: number;\n}\n\nexport type FinalCell = {\n  finalRow: number;\n  finalColumn: number;\n}\n\nexport type StartCell = {\n  startRow: number;\n  startColumn: number;\n}\n\n\nexport type Grid = number[][];\n\nexport type EventCoords = {\n  clientX: number;\n  clientY: number;\n};\n\nexport type SerializedState = { grid: string; turn: Color };\n\nexport type StateControllers = { handleMove: (a: number, b: number, c: number, d: number,) => void; updateUI: (startRow: number, startColumn: number) => void };","import { Color } from \"./types\";\n\nconst pieces = [\"black\", \"black-king\", \"red\", \"red-king\", \"empty\"];\nconst movingDys = [[-1], [-1, 1], [1], [-1, 1]];\nconst eatingDys = movingDys.map((dirs) => dirs.map((d) => d * 2));\nconst colors = [Color.black, Color.red] as const;\nconst EMPTY_VALUE = pieces.length - 1;\n\nexport { pieces, movingDys, eatingDys, colors, EMPTY_VALUE }","import { EMPTY_VALUE } from \"../consts\";\nimport { Cell, FinalCell } from \"../types\";\n\nexport class GridUpdate {\n  indices: Cell;\n  value: number;\n\n  constructor(row: number, column: number, value = EMPTY_VALUE) {\n    this.indices = { row, column };\n    this.value = value;\n  }\n\n  static updateFactory(final: FinalCell, finalVal: number, ...remove: GridUpdate[]) {\n    let updates = [];\n    updates.push(new GridUpdate(final.finalRow, final.finalColumn, finalVal));\n    remove.forEach(({ indices }) => updates.push(new GridUpdate(indices.row, indices.column)));\n    return updates;\n  }\n}\n\nexport type PotentialMoves = {\n  finalCell: Cell;\n  updates: GridUpdate[];\n}[];","import { colors, EMPTY_VALUE, pieces } from \"./consts\";\nimport { Color } from \"./types\";\n\nexport const clsx = (bag: Record<string, unknown>, ...strings: string[]) => {\n  const filtered = Object.entries(bag).filter(([, v]) => Boolean(v)).map(([cls]) => cls);\n  return [...strings, ...filtered].join(\" \");\n}\n\nexport function forEachCell(cb: (row: number, column: number) => void) {\n  for (let row = 0; row < 8; row++) {\n    for (let column = 0; column < 8; column++) {\n      cb(row, column);\n    }\n  }\n}\n\nexport function colorForCell(gridVal: number) {\n  return gridVal !== EMPTY_VALUE ? pieces[gridVal].split(\"-\")[0] as Color : undefined;\n}\n\nexport function changeGridStringToNumbers(gridstring: string) {\n  return [\"b\", \"B\", \"r\", \"R\", \"-\"].reduce((grid, alias, i) => grid.replaceAll(alias, String(i)), gridstring)\n}\n\nexport function oppositeColor(color?: Color) {\n  return color === colors[0] ? colors[1] : colors[0];\n}","import { eatingDys, EMPTY_VALUE, movingDys, pieces } from \"../consts\";\nimport { GridUpdate, PotentialMoves } from \"./GridUpdate\";\nimport { Cell, Color, FinalCell, Grid, SerializedState, StartCell } from \"../types\";\nimport { colorForCell, forEachCell, oppositeColor } from \"../utils\";\n\n\nexport function generateGridUpdatesForMoveIfLegal(boardState: BoardState, { finalRow, finalColumn, startRow, startColumn }: FinalCell & StartCell) {\n  const logicalMoves = allLogicalLegalMovesForCell(boardState, { startRow, startColumn });\n  const specificMove = logicalMoves.find((({ finalCell }) => finalCell.row === finalRow && finalCell.column === finalColumn))\n  if (!specificMove) return [];\n\n  const { updates } = specificMove;\n\n  if (((finalRow === 7) || (finalRow === 0)) && updates.length > 0)\n    updates.push(new GridUpdate(finalRow, finalColumn, pieces.indexOf(colorForCell(boardState.grid[startRow][startColumn]) + \"-\" + \"king\")));\n\n  return updates;\n}\n\nfunction allLogicalLegalMovesForCell({ grid, turn }: BoardState, { startRow, startColumn }: StartCell) {\n  const startCell = grid[startRow][startColumn];\n  if (startCell === EMPTY_VALUE || colorForCell(startCell) !== turn\n  )\n    return [];\n  return isThereAnEatingPossibilityForGivenColor(grid, colorForCell(grid[startRow][startColumn]))\n    ? allLegalEatingMovesForCell(grid, startRow, startColumn)\n    : allLegalNonEatingMovesForCell(grid, startRow, startColumn)\n}\n\nfunction isThereAnEatingPossibilityForGivenColor(grid: Grid, color?: Color) {\n  return allCellsForColor(grid, color).some(({ row, column }) => allLegalEatingMovesForCell(grid, row, column).length > 0);\n}\n\n\n\nexport function allLegalEatingMovesForCell(grid: Grid, startRow: number, startColumn: number) {\n  const eatingDxs = [2, -2];\n  const possibleEatings: PotentialMoves = [];\n  const startCell = grid[startRow][startColumn];\n\n  if (startCell === EMPTY_VALUE)\n    return possibleEatings;\n\n  for (let dy of eatingDys[startCell]) {\n    for (let dx of eatingDxs) {\n      let finalRow = startRow + dy, finalColumn = startColumn + dx;\n      if (areRowsOutOfBounds(finalRow) || areColumnsOutOfBounds(finalColumn))\n        continue;\n      let finalCell = grid[finalRow][finalColumn];\n\n      let oneBeforeRow = startRow + ((Math.abs(dy) - 1) * Math.sign(dy)),\n        oneBeforeColumn = startColumn + ((Math.abs(dx) - 1) * Math.sign(dx));\n\n      let oneBefore = grid[oneBeforeRow][oneBeforeColumn];\n\n      if (finalCell === EMPTY_VALUE)\n        if (colorForCell(oneBefore) === oppositeColor(colorForCell(startCell))) {\n          possibleEatings.push({\n            finalCell: { row: finalRow, column: finalColumn },\n            updates: GridUpdate.updateFactory({\n              finalRow,\n              finalColumn\n            }, startCell, new GridUpdate(oneBeforeRow, oneBeforeColumn), new GridUpdate(startRow, startColumn))\n          });\n        }\n    }\n  }\n  return possibleEatings;\n}\n\n\nfunction allCellsForColor(grid: Grid, color?: Color) {\n  const cells: Cell[] = [];\n  forEachCell((row: number, column: number) => {\n    if (colorForCell(grid[row][column]) === color)\n      cells.push({ row, column })\n  })\n  return cells;\n}\n\nexport function didColorLose(grid: Grid, color: Color) {\n  return !allCellsForColor(grid, color).some(({ row, column }) => allLegalEatingMovesForCell(grid, row, column).length > 0 || allLegalNonEatingMovesForCell(grid, row, column).length > 0);\n}\n\nconst deepGridCopy = (arr: Grid): Grid => arr.map((r) => r.map((c) => c)) as Grid;\n\n\nfunction areRowsOutOfBounds(...indices: number[]) {\n  return indices.some(row => row >= 8 || row < 0);\n}\n\nfunction areColumnsOutOfBounds(...indices: number[]) {\n  return indices.some(column => column >= 8 || column < 0);\n}\n\nfunction allLegalNonEatingMovesForCell(grid: Grid, startRow: number, startColumn: number) {\n  const movingDxs = [1, -1];\n\n  let possibleMovings: PotentialMoves = [];\n  let startCell = grid[startRow][startColumn];\n  if (startCell === EMPTY_VALUE)\n    return possibleMovings;\n\n  for (let dy of movingDys[startCell]) {\n    for (let dx of movingDxs) {\n      let finalRow = startRow + dy, finalColumn = startColumn + dx;\n      if (areRowsOutOfBounds(finalRow) || areColumnsOutOfBounds(finalColumn))\n        continue;\n      let finalCell = grid[finalRow][finalColumn];\n      if (finalCell === EMPTY_VALUE)\n        possibleMovings.push({\n          finalCell: { row: finalRow, column: finalColumn },\n          updates: GridUpdate.updateFactory({\n            finalRow,\n            finalColumn\n          }, startCell, new GridUpdate(startRow, startColumn))\n        });\n    }\n  }\n  return possibleMovings;\n}\n\n\n\n\nexport class BoardState {\n  grid: Grid;\n  turn: Color;\n  flaggedCell?: Cell;\n  piecesThatCanMove: Cell[];\n\n  constructor(grid: Grid, turnColor: Color, { flaggedCell }: { flaggedCell?: Cell; } = {}) {\n    this.grid = grid;\n    this.turn = turnColor;\n    this.flaggedCell = flaggedCell;\n    this.piecesThatCanMove = this.getPiecesThatCanMove();\n  }\n\n  updatedGrid(updates: GridUpdate[]) {\n    let newGrid = BoardState.computeGrid(this.grid, updates);\n    return new BoardState(newGrid, this.turn);\n  }\n\n  updateFlaggedCell(flaggedCell?: Cell) {\n    return new BoardState(this.grid, this.turn, { flaggedCell });\n  }\n\n  updateCurrentTurn() {\n    let grid = this.grid;\n    return new BoardState(grid, oppositeColor(this.turn));\n  }\n\n  getPiecesThatCanMove() {\n    return (this.flaggedCell\n      ? [this.flaggedCell]\n      : allCellsForColor(this.grid, this.turn))\n      .filter(({ row, column }) => this.getLegalTargets(row, column).length);\n  }\n\n  getLegalTargets(startRow: number, startColumn: number) {\n    return allLogicalLegalMovesForCell(this, { startRow, startColumn }).map(({ finalCell }) => finalCell);\n  }\n\n  static computeGrid(grid: Grid, updates: GridUpdate[]) {\n    let gridCopy = deepGridCopy(grid);\n    updates.forEach(({ indices: { row, column }, value }) => {\n      gridCopy[row][column] = value;\n    });\n    return gridCopy;\n  }\n\n\n  serialize(): SerializedState {\n    const classToAlias = [\"b\", \"B\", \"r\", \"R\", \"-\"];\n    return {\n      grid: this.grid.map((r) => {\n        return r.map((c) => classToAlias[c]).join(\"\");\n      }).join(\"\\n\"),\n      turn: this.turn\n    };\n  }\n}\n\n","import { Color, SerializedState } from \"../types\";\n\n\nexport const defaultSetup = {\n  turn: Color.black,\n  grid: `\n-r-r-r-r\nr-r-r-r-\n-r-r-r-r\n--------\n--------\nb-b-b-b-\n-b-b-b-b\nb-b-b-b-\n`.trim().split(\"\\n\").filter(Boolean).join(\"\\n\")\n};\n\n\n\nconst STATE = \"state\";\nconst GRID = \"grid\";\nconst TURN = \"turn\";\nconst { pathname, href } = window.location;\n\n\nconst fromLocalStorage = () => {\n  try {\n    return JSON.parse(localStorage.getItem(STATE)!);\n  } catch (ex) {\n    return;\n  }\n};\nconst fromParams = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const grid = urlParams.get(GRID);\n  const turn = urlParams.get(TURN);\n  return grid ? { grid, turn } : undefined;\n};\n\nconst fetch = (): SerializedState => (window.location.search ? fromParams() : fromLocalStorage()) || defaultSetup;\n\nconst persist = ({ grid, turn } = defaultSetup) => {\n  const params = new URLSearchParams();\n  params.set(GRID, grid);\n  params.set(TURN, turn);\n  history.pushState(null, '', `${pathname}?${params.toString()}`);\n  localStorage.setItem(STATE, JSON.stringify({ grid, turn }));\n};\nconst reset = () => {\n  history.pushState(null, '', pathname);\n  localStorage.removeItem(STATE);\n};\n\nfunction compileSharingUrl() {\n  const params = new URLSearchParams();\n  const { grid, turn } = fetch();\n  params.set(GRID, grid);\n  params.set(TURN, turn);\n  return `${href.split('?')[0]}?${params.toString()}`;\n}\n\n\n\nexport const storageBackend = { fetch, persist, reset, compileSharingUrl };\n\n","import { storageBackend } from \"./storageBackend\";\n\nconst { fetch, persist, reset, compileSharingUrl } = storageBackend;\n\nexport const store = {\n  get serialized() {\n    return fetch();\n  },\n  set serialized({ grid, turn }) {\n    persist({ grid, turn });\n  },\n  reset,\n  get share() {\n    return compileSharingUrl();\n  }\n};\n","import { defaultSetup } from \"./store/storageBackend\";\nimport { store } from \"./store/store\";\nimport { SerializedState } from \"./types\";\n\nlet _stack = [store.serialized];\nlet idx = 0;\n\n\nexport const stack = {\n  resetStack: () => {\n    _stack = [defaultSetup];\n    idx = 0;\n  },\n  add: (serialized: SerializedState) => {\n    _stack[++idx] = serialized;\n    _stack.splice(idx + 1);\n  },\n  dec: () => _stack[--idx],\n  inc: () => _stack[++idx],\n  get isEmpty() {\n    return idx === 0;\n  },\n  get isEnd() {\n    return idx === _stack.length - 1;\n  }\n}\n","import { pieces, EMPTY_VALUE, colors } from \"../consts\";\nimport { stack } from \"../stack\";\nimport { Cell, Grid, Color, EventMapSubset, EventCoords, StateControllers } from \"../types\";\nimport { forEachCell, clsx } from \"../utils\";\n\nconst $ = <E extends HTMLElement = HTMLElement>(id: string) => document.getElementById(id)! as E;\n\nconst table = $<HTMLTableElement>(\"table\");\nconst turnDiv = $(\"turnDiv\");\nconst trailDiv = $(\"trailingDiv\");\nconst mainDiv = $(\"containerBoard\");\nconst reset = $(\"reset\");\nconst share = $(\"share\");\nconst undo = $<HTMLButtonElement>(\"undo\");\nconst redo = $<HTMLButtonElement>(\"redo\");\n\nconst add = <K extends keyof HTMLElementEventMap>(e: K) => (el: HTMLElement, cb: (e: HTMLElementEventMap[K]) => void) => el.addEventListener(e, cb);\nconst click = add(\"click\"), mousedown = add(\"mousedown\"), mouseover = add(\"mouseover\"), touchstart = add(\"touchstart\");\n\nconst LEGAL_TARGET = \"legal-target\";\nconst CAN_MOVE = \"can-move\";\nconst pieceClasses = pieces.map((_, i) => `piece-${pieces[i]}`);\nconst EMPTY_PIECE = pieceClasses[EMPTY_VALUE];\nconst colorToClass = Object.fromEntries(colors.map((c) => [c, `piece-${c}`]));\nconst getDomCell = (row: number, column: number) => table.rows[row].cells[column];\n\nconst createCellInListChecker = (list: Cell[]) => {\n  const moveSet = new Set(list.map(({ row, column }) => `${row},${column}`));\n  return (row: number, column: number) => moveSet.has(`${row},${column}`);\n}\n\nlet dragging = false;\n\nconst forEachDomCell = (cb: (cell: Cell & { domCell: HTMLTableCellElement }) => void) =>\n  forEachCell((row: number, column: number) => cb({ row, column, domCell: getDomCell(row, column) }))\n\nconst renderClasses = (grid: Grid, { legalTargets, piecesThatCanMove, turn }: { turn: Color; legalTargets: Cell[]; piecesThatCanMove: Cell[] }) => {\n  turnDiv.className = colorToClass[turn];\n  undo.disabled = stack.isEmpty;\n  redo.disabled = stack.isEnd;\n  const isLegalTargetForHoveredCell = createCellInListChecker(legalTargets);\n  const canMove = createCellInListChecker(piecesThatCanMove)\n  forEachDomCell(({ row, column, domCell }) => {\n    const cellVal = grid[row][column];\n    const newValue = clsx({\n      [LEGAL_TARGET]: isLegalTargetForHoveredCell(row, column),\n      [CAN_MOVE]: canMove(row, column) && !dragging\n    }, pieceClasses[cellVal]);\n    if (domCell.className !== newValue)\n      domCell.className = newValue;\n  })\n}\n\nconst createDrag = (stateControllers: StateControllers) => {\n  mousedown(table, (e) => {\n    startDrag(e, { moveEvent: \"mousemove\", endEvent: \"mouseup\", coordsExtractor: e => e });\n  });\n  touchstart(table, (e) => {\n    startDrag(e, { moveEvent: \"touchmove\", endEvent: \"touchend\", coordsExtractor: e => e.changedTouches[0] });\n  });\n  function startDrag<EventKey extends EventMapSubset<TouchEvent | MouseEvent>>(e: HTMLElementEventMap[EventKey], { moveEvent, endEvent, coordsExtractor }: { moveEvent: EventKey; endEvent: EventKey; coordsExtractor: (ev: typeof e) => EventCoords; }) {\n    const { clientX, clientY } = coordsExtractor(e);\n    let { row: startRow, column: startColumn } = getIndicesForMouseCoordinates({ clientX, clientY });\n\n    const classSet = new Set(Array.from(getDomCell(startRow, startColumn).classList));\n    const cellHas = classSet.has.bind(classSet);\n    if (!cellHas(CAN_MOVE) || cellHas(EMPTY_PIECE))\n      return;\n\n    dragging = true;\n\n    mainDiv.addEventListener(moveEvent, drag);\n    mainDiv.addEventListener(endEvent, endDrag, { once: true });\n\n    const color = pieceClasses.find(cellHas);\n    color && (trailDiv.className = color);\n    const { width, height } = trailDiv.getBoundingClientRect();\n\n    //-------------Temporarily remove clicked on piece for The Purposes Of Drag------------------\n    stateControllers.updateUI(startRow, startColumn);\n\n    const translateTrailingDiv = (x: number, y: number) => trailDiv.style.transform = `translateX(${x}px) translateY(${y}px)` as const;\n\n    const { x, y } = pointRelativeToTable({ clientX, clientY });\n\n    const pieceRelativeX = x % width;\n    const pieceRelativeY = y % height;\n\n    const translateTrailingDivOffsetByRelativePoint = ({ clientX, clientY }: EventCoords) => translateTrailingDiv(clientX - pieceRelativeX, clientY - pieceRelativeY);\n    translateTrailingDivOffsetByRelativePoint({ clientX, clientY });\n\n    function drag(move: typeof e) {\n      const { clientX, clientY } = coordsExtractor(move);\n      translateTrailingDivOffsetByRelativePoint({ clientX, clientY });\n    }\n\n    function endDrag(end: typeof e) {\n      mainDiv.removeEventListener(moveEvent, drag);\n      trailDiv.style.backgroundImage = \"\";\n      translateTrailingDiv(-1000, -1000);\n      dragging = false;\n      let { row: finalRow, column: finalColumn } = getIndicesForMouseCoordinates(coordsExtractor(end));\n      stateControllers.handleMove(finalRow, finalColumn, startRow, startColumn);\n    }\n  };\n}\n\nlet { left, top, width, height } = table.getBoundingClientRect();\nwindow.onresize = () => ({ left, top, width, height } = table.getBoundingClientRect());\n\nfunction pointRelativeToTable({ clientX, clientY }: EventCoords) {\n  const subtractFromX = left + window.pageXOffset;\n  const subtractFromY = top + window.pageYOffset;\n  const x = clientX - subtractFromX, y = clientY - subtractFromY;\n  return { x, y }\n}\n\nfunction getIndicesForMouseCoordinates({ clientX, clientY }: EventCoords) {\n  const { x, y } = pointRelativeToTable({ clientX, clientY })\n  if (x > width || y > height)\n    return { row: -1, column: -1 };\n  return {\n    row: Math.floor((y / height) * 8),\n    column: Math.floor((x / width) * 8)\n  };\n}\n\n\n\nexport const dom = {\n  updateDOM({ grid, turn, legalTargets, piecesThatCanMove }: { grid: Grid; turn: Color; legalTargets: Cell[]; piecesThatCanMove: Cell[] }) {\n    renderClasses(grid, { legalTargets, piecesThatCanMove, turn });\n  },\n  registerShare: (cb: (e: MouseEvent) => void) => click(share, cb),\n  registerUndo: (undoCb: VoidFunction, redoCb: VoidFunction) => {\n    click(undo, undoCb);\n    click(redo, redoCb);\n    window.addEventListener(\"keydown\", ({ key }) => {\n      if (key === \"ArrowLeft\" && !undo.disabled) undoCb();\n      if (key === \"ArrowRight\" && !redo.disabled) redoCb();\n    })\n  },\n  registerReset: (cb: VoidFunction) => click(reset, cb),\n  registerHover(highlightHovered: (row: number, column: number) => void) {\n    forEachDomCell(({ domCell, row, column }) => {\n      mouseover(domCell, () => highlightHovered(row, column))\n    })\n  },\n  registerDrag(controllers: StateControllers) {\n    createDrag(controllers);\n  }\n};\n","export function toast(text: string, ms = 2000) {\n  const atoast = document.createElement('div');\n  atoast.classList.add(\"toast\");\n  atoast.innerText = text;\n  document.body.appendChild(atoast);\n  setTimeout(() => {\n    document.body.removeChild(atoast);\n  }, ms);\n}\n","import { allLegalEatingMovesForCell, BoardState, didColorLose, generateGridUpdatesForMoveIfLegal } from \"./classes/BoardState\";\nimport { EMPTY_VALUE, pieces } from \"./consts\";\nimport { dom } from \"./dom/dom\";\nimport { GridUpdate } from \"./classes/GridUpdate\";\nimport { stack } from \"./stack\";\nimport { defaultSetup } from \"./store/storageBackend\";\nimport { store } from \"./store/store\";\nimport { toast } from \"./dom/toast\";\nimport { Cell, Grid, SerializedState } from \"./types\";\nimport { changeGridStringToNumbers } from \"./utils\";\n\n\nfunction handleMove(finalRow: number, finalColumn: number, startRow: number, startColumn: number): void {\n  const finalCell = state.grid[finalRow][finalColumn];\n  if (finalCell !== EMPTY_VALUE || (finalRow === -1 && finalColumn === -1)) {\n    updateUI(state);\n    return;\n  }\n\n  let updates = generateGridUpdatesForMoveIfLegal(state, { finalRow, finalColumn, startRow, startColumn });\n  if (updates.length > 0) { //was legal move...\n    let updatedState = state.updatedGrid(updates);\n    let isTheMoveAnEatMove = (updates.length === 3 && pieces[updates[updates.length - 1].value].split(\"-\")[1] !== \"king\") || (updates.length === 4), canTheMovingPieceStillEat = (allLegalEatingMovesForCell(updatedState.grid, finalRow, finalColumn).length !== 0);\n    state = (isTheMoveAnEatMove && canTheMovingPieceStillEat) ? // was eat, and there are more eating options for the same cell\n      updatedState.updateFlaggedCell({ row: finalRow, column: finalColumn }) :\n      updatedState.updateFlaggedCell().updateCurrentTurn();\n    if (didColorLose(state.grid, state.turn)) {\n      toast(`${state.turn} lost! :(`, 5000);\n      resetGame();\n    }\n  }\n  updateUI(state);\n  const serialized = state.serialize();\n  store.serialized = serialized;\n  stack.add(serialized);\n}\n\n\nfunction startSession({ grid, turn }: SerializedState) {\n  const regularBoardSetup = changeGridStringToNumbers(grid).trim().split(\"\\n\").map(r => r.trim());\n  const raw: Grid = Array.from({ length: 8 }, () => Array.from({ length: 8 }));\n  const matrix = raw.map((row, rIndex) => row.map((_, cIndex) => Number(regularBoardSetup[rIndex].charAt(cIndex))));\n  return updateUI(new BoardState(matrix, turn));\n}\n\nlet state = startSession(store.serialized);\nfunction resetGame() {\n  stack.resetStack();\n  store.reset();\n  state = startSession(defaultSetup);\n}\n\nfunction updateUI(state: BoardState, legalTargets: Cell[] = []) {\n  dom.updateDOM({ grid: state.grid, turn: state.turn, legalTargets, piecesThatCanMove: state.piecesThatCanMove });\n  return state;\n}\n\n\n// MAIN:\ndom.registerDrag({\n  handleMove,\n  updateUI: (startRow: number, startColumn: number) => {\n    updateUI(state.updatedGrid([new GridUpdate(startRow, startColumn, EMPTY_VALUE)]), state.getLegalTargets(startRow, startColumn))\n  }\n});\ndom.registerShare(() => {\n  navigator.clipboard.writeText(store.share).then(() => {\n    toast(\"URL with game-state copied to clipboard! 🎆🎆🎆\")\n  })\n})\ndom.registerReset(resetGame);\ndom.registerHover((row: number, column: number) => updateUI(state, state.getLegalTargets(row, column)))\ndom.registerUndo(\n  () => {\n    state = startSession(stack.dec());\n    store.serialized = state.serialize();\n  },\n  () => {\n    state = startSession(stack.inc());\n    store.serialized = state.serialize();\n  }\n);"],"names":["relList","link","processPreload","mutations","mutation","node","getFetchOpts","script","fetchOpts","Color","pieces","movingDys","eatingDys","dirs","d","colors","EMPTY_VALUE","GridUpdate","row","column","value","__publicField","final","finalVal","remove","updates","indices","clsx","bag","strings","filtered","v","cls","forEachCell","cb","colorForCell","gridVal","changeGridStringToNumbers","gridstring","grid","alias","i","oppositeColor","color","generateGridUpdatesForMoveIfLegal","boardState","finalRow","finalColumn","startRow","startColumn","specificMove","allLogicalLegalMovesForCell","finalCell","turn","startCell","isThereAnEatingPossibilityForGivenColor","allLegalEatingMovesForCell","allLegalNonEatingMovesForCell","allCellsForColor","eatingDxs","possibleEatings","dy","dx","areRowsOutOfBounds","areColumnsOutOfBounds","oneBeforeRow","oneBeforeColumn","oneBefore","cells","didColorLose","deepGridCopy","arr","r","c","movingDxs","possibleMovings","BoardState","turnColor","flaggedCell","newGrid","gridCopy","classToAlias","defaultSetup","STATE","GRID","TURN","pathname","href","fromLocalStorage","fromParams","urlParams","fetch","persist","params","reset","compileSharingUrl","storageBackend","store","_stack","idx","stack","serialized","$","id","table","turnDiv","trailDiv","mainDiv","share","undo","redo","add","e","el","click","mousedown","mouseover","touchstart","LEGAL_TARGET","CAN_MOVE","pieceClasses","_","EMPTY_PIECE","colorToClass","getDomCell","createCellInListChecker","list","moveSet","dragging","forEachDomCell","renderClasses","legalTargets","piecesThatCanMove","isLegalTargetForHoveredCell","canMove","domCell","cellVal","newValue","createDrag","stateControllers","startDrag","moveEvent","endEvent","coordsExtractor","clientX","clientY","getIndicesForMouseCoordinates","classSet","cellHas","drag","endDrag","width","height","translateTrailingDiv","x","y","pointRelativeToTable","pieceRelativeX","pieceRelativeY","translateTrailingDivOffsetByRelativePoint","move","end","left","top","subtractFromX","subtractFromY","dom","undoCb","redoCb","key","highlightHovered","controllers","toast","text","ms","atoast","handleMove","state","updateUI","updatedState","isTheMoveAnEatMove","canTheMovingPieceStillEat","resetGame","startSession","regularBoardSetup","matrix","rIndex","cIndex"],"mappings":"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"}